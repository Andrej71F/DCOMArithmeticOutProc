#pragma once

using namespace ATL;

template <class T>
class CProxy_IArithmeticEvents : public IConnectionPointImpl<T, &__uuidof(_IArithmeticEvents), CComDynamicUnkArray>
{
    // WARNING: This class may be regenerated by the wizard
public:
    HRESULT Fire_OnOperation(BSTR operation, DOUBLE a, DOUBLE b, DOUBLE result)
    {
        HRESULT hr = S_OK;
        T* pT = static_cast<T*>(this);
        int nConnectionIndex;
        CComVariant varResult;
        CComVariant* pvars = new CComVariant[4];
        int nConnections = m_vec.GetSize();

        for (nConnectionIndex = 0; nConnectionIndex < nConnections; nConnectionIndex++)
        {
            pT->Lock();
            CComPtr<IUnknown> sp = m_vec.GetAt(nConnectionIndex);
            pT->Unlock();

            IDispatch* pDispatch = reinterpret_cast<IDispatch*>(sp.p);
            if (pDispatch != NULL)
            {
                VariantClear(&varResult);
                pvars[3] = operation;
                pvars[2] = a;
                pvars[1] = b;
                pvars[0] = result;
                DISPPARAMS disp = { pvars, NULL, 4, 0 };
                hr = pDispatch->Invoke(1, IID_NULL, LOCALE_USER_DEFAULT, DISPATCH_METHOD, &disp, &varResult, NULL, NULL);
            }
        }
        delete[] pvars;
        return hr;
    }
};
